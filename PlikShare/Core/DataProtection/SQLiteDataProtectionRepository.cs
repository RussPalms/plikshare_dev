using System.Xml.Linq;
using Microsoft.AspNetCore.DataProtection.Repositories;
using Microsoft.Data.Sqlite;
using PlikShare.Core.Database.MainDatabase;
using PlikShare.Core.SQLite;
using Serilog;

namespace PlikShare.Core.DataProtection;

public class SQLiteDataProtectionRepository(PlikShareDb plikShareDb) : IXmlRepository
{
    public const string AppSettingsPrefix = "data_protection_";

    public IReadOnlyCollection<XElement> GetAllElements()
    {
        using var connection = plikShareDb.OpenConnection();

        var results = connection
            .Cmd(
                sql: $@"
                    SELECT as_key, as_value
                    FROM as_app_settings
                    WHERE as_key LIKE '{AppSettingsPrefix}%'
                ",
                readRowFunc: reader => new
                {
                    Key = reader.GetString(0),
                    Value = reader.GetString(1)
                })
            .Execute();

        if (results.Count == 0)
            return [];

        var xElements = new List<XElement>();

        foreach (var result in results)
        {
            var xElement = TryParseDataProtectionKeyOrRemove(
                id: result.Key,
                value: result.Value,
                connection: connection);

            if (xElement is not null)
                xElements.Add(xElement);
        }
        
        return xElements;
    }

    private XElement? TryParseDataProtectionKeyOrRemove(
        string id, 
        string value,
        SqliteConnection connection)
    {
        try
        {
            return XElement.Parse(value);
        }
        catch (System.Xml.XmlException xmlException)
        {
            Log.Warning(xmlException,
                "Something went wrong while deserializing DataProtection Key with Id: '{DataProtectionKeyId}'. " +
                "This key will be deleted and new one will be generated by the system.",
                id);

            connection.OneRowCmd(
                    sql: @"
                        DELETE FROM as_app_settings
                        WHERE as_key = $key
                        RETURNING as_key
                    ",
                    readRowFunc: reader => reader.GetString(0))
                .WithParameter("$key", id)
                .ExecuteOrThrow();

            return null;
        }
        catch (Exception e)
        {
            Log.Error(e, "Something went wrong while deserializing DataProtection Key with Id: '{DataProtectionKeyId}'.", id);

            throw;
        }
    }
    
    public void StoreElement(XElement element, string friendlyName)
    {
        using var connection = plikShareDb.OpenConnection();

        var value = element.ToString(SaveOptions.DisableFormatting);

        connection
            .OneRowCmd(
                sql: @"
                    INSERT INTO as_app_settings(
                        as_key,
                        as_value
                    ) VALUES (
                        $key,
                        $value
                    ) 
                    ON CONFLICT (as_key)
                    DO UPDATE SET as_value = excluded.as_value
                    RETURNING
                      as_key
                ",
                readRowFunc: reader => reader.GetString(0))
            .WithParameter("$key", $"{AppSettingsPrefix}{friendlyName}")
            .WithParameter("$value", value)
            .ExecuteOrThrow();
    }
}